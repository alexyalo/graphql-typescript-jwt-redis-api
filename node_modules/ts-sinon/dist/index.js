"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sinon = require("sinon");
/**
 * @param methods passing map of methods has become @deprecated as it may lead to overwriting stubbed method type
 */
function stubObject(object, methods) {
    var stubObject = Object.assign({}, object);
    var objectMethods = Object.getOwnPropertyNames(Object.getPrototypeOf(object));
    var excludedMethods = [
        '__defineGetter__', '__defineSetter__', 'hasOwnProperty',
        '__lookupGetter__', '__lookupSetter__', 'propertyIsEnumerable',
        'toString', 'valueOf', '__proto__', 'toLocaleString', 'isPrototypeOf'
    ];
    for (var method in object) {
        if (typeof object[method] == "function") {
            objectMethods.push(method);
        }
    }
    for (var _i = 0, objectMethods_1 = objectMethods; _i < objectMethods_1.length; _i++) {
        var method = objectMethods_1[_i];
        if (!excludedMethods.includes(method)) {
            stubObject[method] = object[method];
        }
    }
    if (Array.isArray(methods)) {
        for (var _a = 0, methods_1 = methods; _a < methods_1.length; _a++) {
            var method = methods_1[_a];
            stubObject[method] = sinon.stub();
        }
    }
    else if (typeof methods == "object") {
        for (var method in methods) {
            stubObject[method] = sinon.stub();
            stubObject[method].returns(methods[method]);
        }
    }
    else {
        for (var _b = 0, objectMethods_2 = objectMethods; _b < objectMethods_2.length; _b++) {
            var method = objectMethods_2[_b];
            if (typeof object[method] == "function" && method !== "constructor") {
                stubObject[method] = sinon.stub();
            }
        }
    }
    return stubObject;
}
exports.stubObject = stubObject;
function stubConstructor(constructor) {
    return sinon.createStubInstance(constructor);
}
exports.stubConstructor = stubConstructor;
/**
 * @param methods passing map of methods has become @deprecated as it may lead to overwriting stubbed method type
 */
function stubInterface(methods) {
    if (methods === void 0) { methods = {}; }
    var object = stubObject({}, methods);
    var proxy = new Proxy(object, {
        get: function (target, name) {
            if (!target[name] && name !== 'then') {
                target[name] = sinon.stub();
            }
            return target[name];
        }
    });
    return proxy;
}
exports.stubInterface = stubInterface;
sinon['stubObject'] = stubObject;
sinon['stubInterface'] = stubInterface;
exports.default = sinon;
